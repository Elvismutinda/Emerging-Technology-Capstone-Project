services:
  nginx:
    depends_on:
      - frontend
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '8080:80'
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - frontend_data:/app/node_modules
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
    # deploy:
    #   replicas: 3 # Scale the frontend service to 3 replicas
    #   restart_policy:
    #     condition: on-failure

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    volumes:
      - backend_data:/go/pkg/mod
    environment:
      - ENVIRONMENT=docker
    ports:
      - "8000:8000"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    container_name: db
    image: postgres:15-alpine
    hostname: db
    env_file:
      - ./backend/.env
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  migrate:
    image: arigaio/atlas:latest
    env_file:
      - ./backend/.env
    command: >
      migrate apply
      --url ${DOCKER_DB_URL}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/migrations:/migrations
    networks:
      - app-network

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.14.0
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "6000:6000"
      - "9600:9600"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  backend_data:
  frontend_data:
  migration_data:
  esdata:
    driver: local