services:
  nginx:
    depends_on:
      - frontend
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '8080:80'
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - frontend_data:/app/node_modules
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    volumes:
      - backend_data:/go/pkg/mod
    environment:
      - ENVIRONMENT=docker
    ports:
      - "8000:8000"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    container_name: db
    image: postgres:15-alpine
    hostname: db
    env_file:
      - ./backend/.env
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  migrate:
    image: arigaio/atlas:latest
    env_file:
      - ./backend/.env
    command: >
      migrate apply
      --url ${DOCKER_DB_URL}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/migrations:/migrations
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  backend_data:
  frontend_data:
  migration_data: